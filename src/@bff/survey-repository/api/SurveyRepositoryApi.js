/*
 * Client Survey Repository API
 * Client Survey Repository API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@eoc.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.57
 *
 * Do not edit the class manually.
 *
 */
import SurveyApiClient from "../SurveyApiClient";
import Error from '../model/Error';
import Survey from '../model/Survey';

/**
* SurveyRepository service.
* @module api/SurveyRepositoryApi
* @version 1.0.0
*/
export default class SurveyRepositoryApi {

    /**
    * Constructs a new SurveyRepositoryApi. 
    * @alias module:api/SurveyRepositoryApi
    * @class
    * @param {module:SurveyApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:SurveyApiClient#instance
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || SurveyApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addOrUpdateSurvey operation.
     * @callback moduleapi/SurveyRepositoryApi~addOrUpdateSurveyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Survey{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates \\ Update a new Survey in the store.  Duplicates are not allowed
     * Creates \\ Update a new Survey in the store.  Duplicates are not allowed
     * @param {module:model/Survey} body Survey to add to the store
     * @param {module:api/SurveyRepositoryApi~addOrUpdateSurveyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addOrUpdateSurvey(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addOrUpdateSurvey");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Survey;

      return this.apiClient.callApi(
        '/survey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteSurvey operation.
     * @callback moduleapi/SurveyRepositoryApi~deleteSurveyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single Survey based on the ID supplied
     * deletes a single Survey based on the ID supplied
     * @param {String} id ID of Survey to delete
     * @param {module:api/SurveyRepositoryApi~deleteSurveyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSurvey(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSurvey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/survey/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findSurvey operation.
     * @callback moduleapi/SurveyRepositoryApi~findSurveyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Survey>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Surveys from the system that the user has access to
     * Returns all Surveys from the system that the user has access to
     * @param {Number} page Page number
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isCompleted Filter by completed flag
     * @param {module:api/SurveyRepositoryApi~findSurveyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findSurvey(page, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling findSurvey");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'page': page,'isCompleted': opts['isCompleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Survey];

      return this.apiClient.callApi(
        '/survey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findSurveyById operation.
     * @callback moduleapi/SurveyRepositoryApi~findSurveyByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Survey{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Survey based on a single ID
     * Returns a Survey based on a single ID
     * @param {String} id ID of Survey to fetch
     * @param {module:api/SurveyRepositoryApi~findSurveyByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findSurveyById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findSurveyById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Survey;

      return this.apiClient.callApi(
        '/survey/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}